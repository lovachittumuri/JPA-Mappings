
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import lombok.Data;

@Entity
@Data
public class Employee {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	Long empId;

	String name;
	Long age;


	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "fk_emp_id")
	private Address address;
	


	
}


package com.cl.mappingproject.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import lombok.Data;

@Entity
@Data
public class Address {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	Long addressId;

	String city;
	Long pincode;

	@OneToOne(mappedBy = "address")
	private Employee employee;

	@Override
	public String toString() {
		return "Address [addressId=" + addressId + ", city=" + city + ", pincode=" + pincode + "]";
	}

}




package com.cl.mappingproject.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cl.mappingproject.model.Employee;
import com.cl.mappingproject.repository.IEmployeeRepository;

@RestController
public class HomeController {
	
	@Autowired
	IEmployeeRepository repository;
	

	@GetMapping("/")
	String home() {
		return "Good Morning Lova Chittumuri";
	}

	@PostMapping("/saveEmployee")
	List<Employee> saveEmployee(@RequestBody List<Employee> employee) {
		List<Employee>  employeeList = repository.saveAll(employee);
		return employeeList;
	}
	
	@GetMapping("/getEmplist")
	List<Employee> getEmplist() {
		List<Employee>  employeeList = repository.findAll();
		return employeeList;
	}


	
	
	
}




Input :


localhost:9090/saveEmployee


one to one mapping 


[
    {
        "name": "Ramya Chittumuri",
        "age": 18,
        "address": {
            "city": "Vizag",
            "pincode": 531082
        }
    },
    {
        "name": "Kruthi Chittumuri",
        "age": 19,
        "address": {
            "city": "BZA",
            "pincode": 531033
        }
    }
]






Input :


localhost:9090/saveEmployee


one to many mapping 


[
    {
        "name": "Ramya Chittumuri",
        "age": 18,
        "address": [{
            "city": "Vizag",
            "pincode": 531082
        },
		{
            "city": "Srikakulam",
            "pincode": 531012
        }]
    },
    {
        "name": "Kruthi Chittumuri",
        "age": 19,
        "address": [{
            "city": "BZA",
            "pincode": 531033
        },
		{
            "city": "Rajamandry",
            "pincode": 531088
        }]
    }
]

Changes : 


	//@OneToOne(cascade = CascadeType.ALL)
	//@JoinColumn(name = "addressId")
	//private Address address;
	
	
	@OneToMany(cascade = CascadeType.ALL)
	@JoinColumn(name = "addressId",referencedColumnName = "empId")
	private List<Address> address;
	
	
	


Many To Many Mapping


@Entity
@Data
public class Employee implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	Long empId;

	String name;
	Long age;

	
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "employee_project", joinColumns = @JoinColumn(name="employee_id"),inverseJoinColumns = @JoinColumn(name="project_id"))
	private Set<Project> assignedProjects = new HashSet<>();

		
	
}



import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToMany;
import lombok.Data;

@Entity
@Data
public class Project implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long projectId;

	private String projectName;

	@JsonIgnore
	@ManyToMany(mappedBy = "assignedProjects")
	private Set<Employee> employeeSet = new HashSet<>();
}




@Autowired
	IEmployeeRepository employeeRepository;

	@Autowired
	IProjectRepository projectRepository;

	@GetMapping("/")
	String home() {
		return "Good Morning Lova Chittumuri";
	}

	@PostMapping("/saveProjects")
	List<Project> saveProject(@RequestBody List<Project> projectsList) {
		List<Project> savedProjects = projectRepository.saveAll(projectsList);
		return savedProjects;
	}

	@GetMapping("/getProjects")
	List<Project> getProjects() {
		List<Project> savedProjects = projectRepository.findAll();
		return savedProjects;
	}

	@PostMapping("/saveEmployee")
	List<Employee> saveEmployee(@RequestBody List<Employee> employeeList) {
		List<Employee> savedEmployee = employeeRepository.saveAll(employeeList);
		return savedEmployee;
	}

	@GetMapping("/getAllEmployee")
	List<Employee> getAllEmployee() {
		List<Employee> empList = employeeRepository.findAll();
		return empList;
	}

	@PutMapping("/{empId}/project/{projectId}")
	Employee saveEmployeeData(@PathVariable Long empId, @PathVariable Long projectId) {
		Set<Project> projectSet = null;
		Employee employee = employeeRepository.findById(empId).get();
		Project project = projectRepository.findById(projectId).get();
		projectSet = employee.getAssignedProjects();
		projectSet.add(project);
		employee.setAssignedProjects(projectSet);
		return employeeRepository.save(employee);
	}
	
	@GetMapping("/getemp/{empId}")
	Employee getEmpData(@PathVariable Long empId) {
		Employee employee = employeeRepository.findById(empId).get();
		return employee;
	}












	
	